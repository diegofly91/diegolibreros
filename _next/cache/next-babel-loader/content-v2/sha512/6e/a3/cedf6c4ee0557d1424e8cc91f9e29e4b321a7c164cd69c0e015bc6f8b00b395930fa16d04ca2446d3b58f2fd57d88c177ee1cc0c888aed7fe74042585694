{"ast":null,"code":"import _regeneratorRuntime from \"/Users/postareservas/Desktop/diegolibreros/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/postareservas/Desktop/diegolibreros/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/postareservas/Desktop/diegolibreros/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport { DragDropContext, resetServerContext } from \"react-beautiful-dnd\";\nimport Column from \"./column\";\nimport NewBtnItem from './newItem';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    container: {\n      position: 'relative',\n      margin: '20px 0px'\n    }\n  };\n});\n\nvar Prueba = function Prueba() {\n  var classes = useStyles();\n\n  var _useState = useState(initialColumns),\n      columns = _useState[0],\n      setColumns = _useState[1];\n\n  useEffect(function () {\n    resetServerContext();\n  }, []);\n\n  var onDragEnd = function onDragEnd(_ref) {\n    var source = _ref.source,\n        destination = _ref.destination;\n    // Make sure we have a valid destination\n    if (destination === undefined || destination === null) return null; // Make sure we're actually moving the item\n\n    if (source.droppableId === destination.droppableId && destination.index === source.index) return null; // Set start and end variables\n\n    var start = columns[source.droppableId];\n    var end = columns[destination.droppableId]; // If start is the same as end, we're in the same column\n\n    if (start === end) {\n      // Move the item within the list\n      // Start by making a new list without the dragged item\n      console.log(start);\n      var newList = start.list.filter(function (_, idx) {\n        return idx !== source.index;\n      }); // Then insert the item at the right location\n\n      newList.splice(destination.index, 0, start.list[source.index]); // Then create a new copy of the column object\n\n      var newCol = {\n        id: start.id,\n        list: newList\n      }; // Update the state\n\n      setColumns(function (state) {\n        return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, newCol.id, newCol));\n      });\n      return null;\n    } else {\n      // If start is different from end, we need to update multiple columns\n      // Filter the start list like before\n      var newStartList = start.list.filter(function (_, idx) {\n        return idx !== source.index;\n      }); // Create a new start column\n\n      var newStartCol = {\n        id: start.id,\n        list: newStartList\n      }; // Make a new end list array\n\n      var newEndList = end.list; // Insert the item into the end list\n\n      newEndList.splice(destination.index, 0, start.list[source.index]); // Create a new end column\n\n      var newEndCol = {\n        id: end.id,\n        list: newEndList\n      }; // Update the state\n\n      setColumns(function (state) {\n        var _objectSpread3;\n\n        return _objectSpread(_objectSpread({}, state), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newStartCol.id, newStartCol), _defineProperty(_objectSpread3, newEndCol.id, newEndCol), _objectSpread3));\n      });\n      return null;\n    }\n  };\n\n  var addItem = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var title, description, column, idHigher, newEndCol;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              title = _ref2.title, description = _ref2.description, column = _ref2.column;\n              idHigher = 0;\n              Object.values(columns).map(function (item) {\n                item.list.map(function (item2) {\n                  if (Number(item2.id) >= idHigher) {\n                    idHigher = Number(item2.id) + 1;\n                  }\n                });\n              });\n              column.list.unshift({\n                id: String(idHigher),\n                text: title,\n                description: description\n              });\n              newEndCol = {\n                id: column.id,\n                list: column.list\n              };\n              setColumns(function (state) {\n                return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, newEndCol.id, newEndCol));\n              });\n              return _context.abrupt(\"return\", null);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function addItem(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(DragDropContext, {\n    onDragEnd: onDragEnd\n  }, __jsx(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\"\n  }, Object.values(columns).map(function (column) {\n    return __jsx(Grid, {\n      item: true,\n      xs: 12,\n      md: 4,\n      className: classes.container,\n      key: column.id\n    }, __jsx(NewBtnItem, {\n      addItem: addItem,\n      column: column,\n      key: \"\".concat(column.id, \"-btn\")\n    }), __jsx(Column, {\n      column: column,\n      key: column.id\n    }));\n  })));\n};\n\nexport default Prueba;\nvar initialColumns = {\n  todo: {\n    id: \"todo\",\n    list: [{\n      id: \"1\",\n      text: \"text1\",\n      description: \" — I'll be in your neighborhood doing errands this… 1\"\n    }, {\n      id: \"2\",\n      text: \"text2\",\n      description: \" — I'll be in your neighborhood doing errands this… 2\"\n    }, {\n      id: \"3\",\n      text: \"text3\",\n      description: \" — I'll be in your neighborhood doing errands this… 3\"\n    }]\n  },\n  doing: {\n    id: \"doing\",\n    list: [{\n      id: \"4\",\n      text: \"text4\",\n      description: \" — I'll be in your neighborhood doing errands this… 4\"\n    }, {\n      id: \"5\",\n      text: \"text5\",\n      description: \" — I'll be in your neighborhood doing errands this… 5\"\n    }, {\n      id: \"6\",\n      text: \"text6\",\n      description: \" — I'll be in your neighborhood doing errands this… 6\"\n    }]\n  },\n  done: {\n    id: \"done\",\n    list: []\n  }\n};","map":null,"metadata":{},"sourceType":"module"}